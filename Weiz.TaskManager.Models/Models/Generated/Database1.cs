
// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `connectionString`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=zhangweizhong;Initial Catalog=TaskManager;User ID=sa;Password=sasa`
//     Schema:                 ``
//     Include Views:          `False`

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace Weiz.TaskManager.Models
{
	public partial class db : Database
	{
		public db() 
			: base("connectionString")
		{
			CommonConstruct();
		}

		public db(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			db GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static db GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new db();
        }

		[ThreadStatic] static db _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        
		public class Record<T> where T:new()
		{
			public static db repo { get { return db.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }
			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }
			
			private Dictionary<string,bool> ModifiedColumns;
			private void OnLoaded()
			{
				ModifiedColumns = new Dictionary<string,bool>();
			}
			protected void MarkColumnModified(string column_name)
			{
				if (ModifiedColumns!=null)
					ModifiedColumns[column_name]=true;
			}
			public int Update() 
			{ 
				if (ModifiedColumns==null)
					return repo.Update(this); 

				int retv = repo.Update(this, ModifiedColumns.Keys);
				ModifiedColumns.Clear();
				return retv;
			}
			public void Save() 
			{ 
				if (repo.IsNew(this))
					repo.Insert(this);
				else
					Update();
			}
		}
	}
	

    
	[TableName("p_Task")]
	[PrimaryKey("TaskID", autoIncrement=false)]
	[ExplicitColumns]
    public partial class p_Task : db.Record<p_Task>  
    {
        [Column] 
		public Guid TaskID 
		{ 
			get
			{
				return _TaskID;
			}
			set
			{
				_TaskID = value;
				MarkColumnModified("TaskID");
			}
		}
		Guid _TaskID;

        [Column] 
		public string TaskName 
		{ 
			get
			{
				return _TaskName;
			}
			set
			{
				_TaskName = value;
				MarkColumnModified("TaskName");
			}
		}
		string _TaskName;

        [Column] 
		public string TaskParam 
		{ 
			get
			{
				return _TaskParam;
			}
			set
			{
				_TaskParam = value;
				MarkColumnModified("TaskParam");
			}
		}
		string _TaskParam;

        [Column] 
		public string CronExpressionString 
		{ 
			get
			{
				return _CronExpressionString;
			}
			set
			{
				_CronExpressionString = value;
				MarkColumnModified("CronExpressionString");
			}
		}
		string _CronExpressionString;

        [Column] 
		public string Assembly 
		{ 
			get
			{
				return _Assembly;
			}
			set
			{
				_Assembly = value;
				MarkColumnModified("Assembly");
			}
		}
		string _Assembly;

        [Column] 
		public string Class 
		{ 
			get
			{
				return _Class;
			}
			set
			{
				_Class = value;
				MarkColumnModified("Class");
			}
		}
		string _Class;

        [Column] 
		public int? Status 
		{ 
			get
			{
				return _Status;
			}
			set
			{
				_Status = value;
				MarkColumnModified("Status");
			}
		}
		int? _Status;

        [Column] 
		public DateTime? CreatedOn 
		{ 
			get
			{
				return _CreatedOn;
			}
			set
			{
				_CreatedOn = value;
				MarkColumnModified("CreatedOn");
			}
		}
		DateTime? _CreatedOn;

        [Column] 
		public DateTime? ModifyOn 
		{ 
			get
			{
				return _ModifyOn;
			}
			set
			{
				_ModifyOn = value;
				MarkColumnModified("ModifyOn");
			}
		}
		DateTime? _ModifyOn;

        [Column] 
		public DateTime? RecentRunTime 
		{ 
			get
			{
				return _RecentRunTime;
			}
			set
			{
				_RecentRunTime = value;
				MarkColumnModified("RecentRunTime");
			}
		}
		DateTime? _RecentRunTime;

        [Column] 
		public DateTime? LastRunTime 
		{ 
			get
			{
				return _LastRunTime;
			}
			set
			{
				_LastRunTime = value;
				MarkColumnModified("LastRunTime");
			}
		}
		DateTime? _LastRunTime;

        [Column] 
		public string CronRemark 
		{ 
			get
			{
				return _CronRemark;
			}
			set
			{
				_CronRemark = value;
				MarkColumnModified("CronRemark");
			}
		}
		string _CronRemark;

        [Column] 
		public string Remark 
		{ 
			get
			{
				return _Remark;
			}
			set
			{
				_Remark = value;
				MarkColumnModified("Remark");
			}
		}
		string _Remark;

	}
}


